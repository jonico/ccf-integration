apply plugin: 'java'

task exportCCFProjects << {
    ant.taskdef(resource: 'org/tigris/subversion/svnant/svnantlib.xml') {
	    classpath {
	        fileset(dir: 'svnant-1.3.1/lib', includes: '*.jar')
	    }
	}
	ant.svn(javahl: 'false', svnkit:'true',username:ant.properties.svnusername, password:ant.properties.svnpassword, failonerror: 'false') {
	    ant.export(srcUrl:ant.properties.ccfcoresvnurl, destPath: 'buildCCF/ccfcore')
	    ant.export(srcUrl:ant.properties.ccfmastersvnurl, destPath: 'buildCCF/CCFMaster')
	    ant.export(srcUrl:ant.properties.tomcatsvnurl, destPath: 'buildCCF/tomcat7')
	}
}

task buildCCFCore {
	doFirst{
		tasks.init.execute()
	}
	
	doLast {
		tasks.createmanifestHudson.execute() 
		tasks.buildcore.execute()  
		tasks.buildsample.execute()
		tasks.buildtfplugin.execute()
		tasks.buildParticipantplugin.execute()
		tasks.package.execute()
		tasks.deployHudson.execute()
	}	
	
}

task copyCCFCore {
	doFirst {
		delete {
			delete 'buildCCF/CCFMaster/src/main/webapp/WEB-INF/ccfcore/ccfcore.zip'
		}
	}
	
	doLast{
		copy{
			from('buildCCF/ccfcore/deploy/') {
	       		include 'CollabNet Connector Framework-2.0.1-*.zip'
	       		rename 'CollabNet Connector Framework(.*)', 'ccfcore.zip'
	    	}
	    	into 'buildCCF/CCFMaster/src/main/webapp/WEB-INF/ccfcore/'
		}
	}
}

task buildCCFMaster << {
	if(ant.customGenericParticipantConfigFile != null && ant.customGenericParticipantConfigFile != ""){
		File genericParticipantConfigFile = file(ant.customGenericParticipantConfigFile)
		if(genericParticipantConfigFile.exists()){
			copy{	
			 	from(genericParticipantConfigFile.getCanonicalPath()){
					include '*.xml'
					rename '(.*)', 'applicationContext-development-genericParticipant.xml'
				}
				into 'buildCCF/CCFMaster/src/main/resources/META-INF/spring'
			}			
		}
	}
	
	if(ant.customPOMFile != null && ant.customPOMFile != ""){
		File customPOM = file(ant.customPOMFile)
		if(customPOM.exists()){
			copy{	
			 	from(customPOM.getCanonicalPath()){
					include '*.xml'
					rename '(.*)', 'pom.xml'
				}
				into 'buildCCF/CCFMaster/'
			}
		}
	}
	
    ant.exec(outputproperty:"mavenBuildCCFMaster", executable:mvnExecutablePath, dir: 'buildCCF/CCFMaster') {
        arg(line: 'clean install -Dmaven.test.skip=true')
 	}
 	println ant.mavenBuildCCFMaster
}

task copyandzipWar {
	doFirst{
		copy{
			from('buildCCF/CCFMaster/target/') {
		   		include 'CCFMaster.war'
		   	}
		   	into 'buildCCF/tomcat7/apache-tomcat-7.0.14/webapps/'
		}
	}
	doLast{
		ant.zip(destfile: 'distributions/apache-tomcat-7.0.14.zip') {
	        fileset(dir: 'buildCCF/tomcat7/apache-tomcat-7.0.14/') 
	    }
    }
}

task buildGPPlugin<< {
	ant.exec(outputproperty:"gradleBuildParticipant", executable:gradleExecutablePath, dir: 'plugins/'+participantName) {
	       arg(line: 'install')
	}
 	println ant.gradleBuildParticipant
}

task loadPropertyValues<< {
	if(project.hasProperty('participantName')){
	   /**
		*custom properties files are not supported in gradle, please refer the issue ticket
		*http://issues.gradle.org/browse/GRADLE-871, http://issues.gradle.org/browse/GRADLE-1419	
		*
		*/
		def participantPropFile = "plugins/"+participantName+"/gradleConfig-"+participantName+".properties"
		ant.loadproperties(srcfile:participantPropFile)
	}
}

task importAndBuildCore<< {
	File coreBuildFile = file(ant.ccfCoreBuildFile)
	if(coreBuildFile.exists()){
		ant.importBuild(coreBuildFile)
		tasks.buildCCFCore.execute()
		tasks.copyCCFCore.execute() 
	}
}

task buildCCFMasterGPJar<< {
	ant.exec(outputproperty:"mavenBuildGPJar", executable:mvnExecutablePath, dir: 'buildCCF/CCFMaster') {
        arg(line: 'clean package  -DbuildGenericParticipantJar=true -Dmaven.test.skip=true')
 	}
 	println ant.mavenBuildGPJar
 	File gpJar = file('buildCCF/CCFMaster/target/CCFMaster-GenericParticipant.jar')
	if(gpJar.exists()){
		copy{	
			 	from(gpJar.getCanonicalPath()){
					include '*.jar'
					rename 'CCFMaster-GenericParticipant(.*)', 'CCFMaster-'+participantName+'-GenericParticipant.jar'
				}
				into 'lib'
			}
	}
}
task mainBuild<< {
	 tasks.importAndBuildCore.execute() 
	 tasks.buildCCFMaster.execute() 
	 tasks.copyandzipWar.execute() 
}

mainBuild.onlyIf{ project.hasProperty('participantName')}

mainBuild.doFirst {	
	mkdir('buildCCF')
	mkdir('distributions')
	tasks.loadPropertyValues.execute() 
	tasks.exportCCFProjects.execute() 
	
	if(project.hasProperty('buildParticipant') && buildParticipant ){
		tasks.buildCCFMasterGPJar.execute()
		tasks.buildGPPlugin.execute()
	}
}

/*mainBuild.doLast {
	delete {
		delete 'buildCCF'
	}
}*/